Accessible Core
- No theme can guarantee no accessibility issues
- "Accessibility Ready" themes have taken steps to adhere to most WCAG standards, but still need to be assessed individually
    - Theme guidelines provide instructions on how to test a theme for accessibility issues
- Issue to be mindful of:
    - Keyboard Navigation: every item can be reached from the keyboard with a visual indicator
    - Controls: link buttons are constructed using appropriate HTML elements with clear indicators of what task they perform
    - Skip Links: a means to skip over navigation is available
    - Forms: native forms or replacements are accessible
    - Headings: valid hierarchy
    - ARIA Landmark Roles: all parts of the page are set within a landmark region to provide alternate nav access for SR
    - Content Links: links are always underlined
    - Repetitive Link Text: the same link text should not link to different documents
    - Contrasts: colour combos are accessible
    - Images: alt text available
    - Media: does not autoplay or change without user interaction, has captions and transcripts
    - SR Text: classes that hide text for sighted users but are still seen by SR are available
    - Disallowed Attributes: positive tab index values, access key, and blank target attributes spawning new tabs (without clearly indicating so in the link) are not present in theme.

Accessible Interfaces:
- Plugins have their own CSS and can overwrite the focus accessibility from your theme

Design and Color Contrast:
- Interactive elements need to address all of the possible states: passive, focus, on hover?
- Use contrast checker for colour palettes

Accessible Navigation:
- Ensure dropdowns activate on hover and focus
- Adobe Accessible Mega Menu documentations illustrates how you can make complex menus keyboard friendly (arrow navigation to move between sections, esc to exit current panel, home and end for first and last option, etc.)

Perceivable Images & Icons
- Is the image decorative, content, or functional?
- Ornamental svgs and icon fonts should have aria-hidden attribute to hide them from SRs, functional or content should have alt text or aria-label
- If svg is functional or content but needs to be manipulated with CSS, make it an svg element with a role attribute of img

Page Architecture & HTML Semantics:
- Sidebar should be an Aside element
- Wondering what should be the h1? Headings map add-on for Chrome.

Page Builder Plugins:
- Questions to ask when considering a page builder:
    - Is the editor able to create accessible output?
    - Does it encourage the creation of accessible output?
    - Is the editor itself accessible to people with disabilities?

Good Alt Text:
- Assess what purpose the image serves on the page
- Tell the user what it links to, what function it performs, or how it supports the written content

ARIA Attributes to Know:
- aria-expanded="true" (states whether content toggled by a button is currently visible)
- aria-label (SR sees only the value of the attribute and ignores what's inside the tags)
- aria-labelledby (similar to aria-label, but can accept ids of other elements as a value and use the values of those elements as part of the label)
    - Also since you're not hardcoding the value, it can become dynamic when using things like Google translate on a web page, it'll read out the translated version which aria-label won't do
- aria-describedby (add additional information to something that already has a label, so that the singular element can be understood out of context)
- aria-live (lets SR know that a part of the page, empty by default, is expected to change without refresh and is to be monitored and read out upon change)
    - polite: announcements of no particular urgency
    - assertive: announcements needed immediately
    - role= log, status, and alert are also designated as live

Accessibility Toolbars and Overlays:
- in general, don't use 'em plz

Accessibility Plugins Worth Noting:
- Contact Form 7: create your own accessible form
- Contact Form 7: Accessible Defaults: adds a new interface with better template options which makes it easier to create an accessible form
- Yoast SEO: scans written content for readability etc. and helps with developmental accessibility
- WP Accessibility: enforces alt attributes
- Access Monitor: test accessibility of content before publishing, will display a warning and prevent publishing if it's not accessible enough

Accessible Content:
- Avoid instructions that include relational positioning or color.
- Write out the full abbreviation the first time it appears in your content
- If using a word or passage in a different language than the rest of the content, must be specified with the lang attribute (srs use language pronunciation rules)
- Watch for unnecessarily complex language
- Center text alignment is hard on people with low vision (have to hunt for the beginning of each line)
- Fully justified text is hard on people with dyslexia (rivers create motion and distract the user)

Video and Audio:
- Transcript: Written representation of everything on an audio file
- Captions: Full aural descriptions of entire soundscape (for the hearing impaired)
- Subtitles: Only spoken content (for people with auditory processing issues and language support)
- Audio Description: Aural description of important things that are visually represented but never referenced vocally
- Video Player: controls need accessible labels and must be operable from keyboard or with screen reader that updates when changes are made

Underrate Semantic Content Tags:
- <table> should not be used for layout, but are ideal for representation of data
- <dl>, <dt>, <dd> are Description List, Description Term, and Description Definition elements
- <figure> and <figcaption> to display content inline that is referred to or adds context to the rest of the content

Usability Testing Phases:
- Design Review 
- Automated Testing (Tenon.io)
- User Testing 
- Assistive Technology (WAVE by WebAIM, Axe by Deque, Accessibility Bookmarklets)